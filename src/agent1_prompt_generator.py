"""
Agent 1: Prompt Generator
Takes image + description and generates structured prompt for Google Nano Banana model
"""

import base64
from typing import Dict, Any, Optional
from langchain_google_genai import ChatGoogleGenerativeAI
from langchain.prompts import ChatPromptTemplate
from langchain.schema import HumanMessage, SystemMessage
import os
from dotenv import load_dotenv

load_dotenv()

class PromptGeneratorAgent:
    """
    Agent 1: Generates structured prompts for Google Nano Banana model
    Based on product image and description, creates prompts with 4 key guidelines:
    1. Target audience
    2. Problem statement
    3. How users will feel
    4. Price
    """
    
    def __init__(self, api_key: Optional[str] = None):
        """Initialize the prompt generator agent"""
        self.api_key = api_key or os.getenv("GOOGLE_API_KEY")
        if not self.api_key:
            raise ValueError("Google API key is required. Set GOOGLE_API_KEY environment variable.")
        
        self.llm = ChatGoogleGenerativeAI(
            model="gemini-2.5-flash-image-preview",
            google_api_key=self.api_key,
            temperature=0.7,
            max_tokens=2000
        )
        
        self.system_prompt = """
        You are an expert marketing prompt generator for Google's Nano Banana model.
        Your task is to analyze a product image and description to create a structured JSON prompt
        that will be used to generate Meta ad creatives.
        
        You must generate a JSON prompt in this EXACT format:
        {
          "ad_type": "Meta ad Creative for the uploaded product",
          "model_name": "nano banana",
          "product_usage": "The provided product image has no background (transparent/white background). You must create a realistic, natural background that complements the product without looking AI-generated. The background should be photorealistic and match the product's style and quality. Do NOT modify, redesign, or alter the product itself - only add appropriate background and lighting.",
          "visual": {
            "shot_type": "close-up",
            "highlight": "Showcase the product's unique texture, material, and key design features with sharp, clear visual focus.",
            "background": {
              "style": "Create a realistic, natural background that looks like professional product photography. The background should have subtle depth of field, natural color variations, and realistic textures. Think of high-end product photography with soft, natural lighting and authentic environmental elements. Avoid flat, uniform backgrounds or obviously AI-generated patterns.",
              "props": "Include realistic, lifestyle-appropriate props that enhance the scene naturally (e.g., natural textures, organic materials, lifestyle elements). All props should look naturally placed and photographed, not artificially generated. Think of real product photography setups with authentic materials.",
              "contrast": "Create realistic depth with natural lighting, soft shadows, and subtle background blur. The lighting should look like it was captured with professional photography equipment - soft, natural, with realistic falloff. Avoid harsh, artificial lighting or overly perfect shadows."
            },
            "appearance": "The final image must look like a professional product photograph taken with high-end camera equipment. Think of luxury brand photography with natural imperfections, realistic textures, and authentic lighting. Avoid overly perfect, sterile, or obviously AI-generated appearances. The image should have the quality and feel of a real photograph.",
            "lighting": "Create lighting that mimics professional product photography - soft, natural light with realistic shadows and highlights. Think of studio photography with natural light sources, soft shadows, and realistic light falloff. The lighting should look like it was captured with professional photography equipment, not generated by AI."
          },
          "typography_and_layout": {
            "style": "Clean, minimal design with only essential text elements. Avoid overcrowding. Focus on headline, footer, price, and limited time offer only. All text must be artistically integrated into the composition as part of a professional graphic design layout, not as simple text overlays.",
            "product_placement": "The product is the central, hero element of the composition.",
            "visual_hierarchy": "Arrange text elements harmoniously to guide the viewer's eye, maintaining product prominence against a clean background. Keep it organized and uncluttered.",
            "ratio": "1:1 (1080 x 1080 px)",
            "headline": {
              "text": "[GENERATE COMPELLING HEADLINE BASED ON PRODUCT]",
              "placement": "Upper third of the image, rendered in a luxury serif or script font that is part of the scene's design."
            },
            "footer": {
              "text": "[GENERATE COMPELLING FOOTER BASED ON PRODUCT]",
              "placement": "Bottom third, using a refined, professional font that complements the overall aesthetic."
            },
            "pricing_display": {
              "before_discount": {
                "price": "[ORIGINAL PRICE]",
                "style": "Clearly visible with a strike-through effect."
              },
              "after_discount": {
                "price": "[DISCOUNTED PRICE]",
                "style": "Positioned directly below the original price, with emphasis."
              },
              "placement": "Integrate this pricing block logically within the layout, often near the product or footer."
            },
            "limited_time_offer": {
              "text": "[GENERATE LIMITED TIME OFFER TEXT]",
              "style": "A tastefully designed badge with soft edges, integrated into the composition.",
              "placement": "Top right or near pricing area."
            }
          },
          "critical_mandates": [
            "**Absolute Rule:** Never change, redraw, or redesign the product. Use its real colors, structure, and features only.",
            "**Photographic Quality:** The final image must look like a professional product photograph taken with high-end camera equipment. Think of luxury brand photography with natural imperfections, realistic textures, and authentic lighting. Avoid overly perfect, sterile, or obviously AI-generated appearances.",
            "**Background Creation:** The input product has no background. Create a realistic, natural background that complements the product. Use natural materials, textures, and lighting that enhance the product. The background should have subtle depth of field, natural color variations, and realistic textures like professional product photography.",
            "**Lighting Requirements:** Create lighting that mimics professional product photography - soft, natural light with realistic shadows and highlights. Think of studio photography with natural light sources, soft shadows, and realistic light falloff. The lighting should look like it was captured with professional photography equipment.",
            "**Output Format:** Generate the final image in a 1:1 aspect ratio (1080x1080 pixels) regardless of the input product image's dimensions. The product must be perfectly centered and composed within this square frame.",
            "**Realism:** The output must be indistinguishable from a professional photograph taken in a real environment. Think of high-end product photography with natural imperfections, realistic textures, and authentic lighting. Avoid flat, uniform backgrounds or obviously AI-generated patterns.",
            "**Composition:** Keep the design clean and organized. Only include headline, footer, price, and limited time offer. Avoid overcrowding with too many text elements.",
            "**Text Elements:** Focus on these 4 elements only: headline, footer, pricing, and limited time offer. Do not add problem statements, subheadings, or other text that would make the design look crowded.",
            "**Professional Photography Feel:** The image should have the quality and feel of a real photograph taken by a professional photographer. Think of luxury brand photography with natural imperfections, realistic textures, and authentic lighting. Avoid overly perfect, sterile, or obviously AI-generated appearances."
          ]
        }
        
        Generate compelling headlines, footers, and problem statements based on the product analysis.
        Make it specific, actionable, and tailored for Meta ad creative generation.
        
        IMPORTANT: The input product image has no background. You must instruct the AI to CREATE a realistic, natural background that complements the product. The background should look like professional product photography, not AI-generated.
        
        CRITICAL: You must return a complete, valid JSON object. Ensure all brackets, braces, and quotes are properly closed. The JSON must be parseable and complete.
        """
    
    def encode_image(self, image_path: str) -> str:
        """Encode image to base64 for API"""
        with open(image_path, "rb") as image_file:
            return base64.b64encode(image_file.read()).decode('utf-8')
    
    def generate_prompt(self, image_path: str, description: str, user_inputs: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
        """
        Generate structured prompt based on image and description
        
        Args:
            image_path: Path to the product image
            description: Product description
            user_inputs: Optional user inputs for target audience, price, etc.
        
        Returns:
            Dictionary containing the generated prompt and metadata
        """
        try:
            # Encode image
            base64_image = self.encode_image(image_path)
            
            # Prepare messages for Gemini
            messages = [
                SystemMessage(content=self.system_prompt),
                HumanMessage(content=[
                    {
                        "type": "text",
                        "text": f"""
                        Product Description: {description}
                        
                        User Inputs: {user_inputs or "None provided"}
                        
                        Please analyze this product image and generate a structured prompt for Google's Nano Banana model.
                        The product image has no background, so you must instruct the AI to CREATE a realistic, natural background that complements the product.
                        Include the 4 key elements: target audience, problem statement, emotional impact, and pricing.
                        """
                    },
                    {
                        "type": "image_url",
                        "image_url": {
                            "url": f"data:image/jpeg;base64,{base64_image}"
                        }
                    }
                ])
            ]
            
            # Generate response
            response = self.llm.invoke(messages)
            
            # Parse and structure the response
            prompt_text = response.content
            
            # Extract structured information
            structured_prompt = self._parse_prompt(prompt_text)
            
            return {
                "success": True,
                "prompt": prompt_text,
                "structured_prompt": structured_prompt,
                "metadata": {
                    "image_path": image_path,
                    "description": description,
                    "user_inputs": user_inputs
                }
            }
            
        except Exception as e:
            return {
                "success": False,
                "error": str(e),
                "prompt": None,
                "structured_prompt": None,
                "metadata": {
                    "image_path": image_path,
                    "description": description,
                    "user_inputs": user_inputs
                }
            }
    
    def _parse_prompt(self, prompt_text: str) -> Dict[str, str]:
        """Parse the generated prompt into structured components"""
        # This is a simple parser - in production, you might want more sophisticated parsing
        structured = {
            "target_audience": "",
            "problem_statement": "",
            "emotional_impact": "",
            "pricing": "",
            "full_prompt": prompt_text
        }
        
        # Try to extract key sections (this is a basic implementation)
        lines = prompt_text.split('\n')
        current_section = None
        
        for line in lines:
            line = line.strip()
            if not line:
                continue
                
            # Check for section headers
            if "target audience" in line.lower() or "audience" in line.lower():
                current_section = "target_audience"
            elif "problem" in line.lower():
                current_section = "problem_statement"
            elif "emotional" in line.lower() or "feel" in line.lower():
                current_section = "emotional_impact"
            elif "price" in line.lower() or "cost" in line.lower():
                current_section = "pricing"
            elif current_section and line:
                structured[current_section] += line + " "
        
        return structured
    
    def get_prompt_preview(self, structured_prompt: Dict[str, str]) -> str:
        """Get a formatted preview of the generated prompt"""
        preview = "=== GENERATED PROMPT PREVIEW ===\n\n"
        
        for key, value in structured_prompt.items():
            if key != "full_prompt" and value:
                preview += f"{key.replace('_', ' ').title()}: {value.strip()}\n\n"
        
        preview += "=== FULL PROMPT ===\n"
        preview += structured_prompt.get("full_prompt", "")
        
        return preview
